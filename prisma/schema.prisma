// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                    String   @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  role          Role      @default(USER)

  @@map("user")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Subscriber {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  subscribedAt  DateTime @default(now())
  status        SubscriberStatus @default(ACTIVE)
  source        String?
  tags          String[] @default([])
  categoryId    String?
  category      Category? @relation(fields: [categoryId], references: [id])
  notes         String?
  lastEmailSent DateTime?
  emailCount    Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  emailLogs     EmailLog[]
  influencer    Influencer?

  @@map("subscribers")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String
  description String
  influencersEnabled Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscribers Subscriber[]
  campaigns   EmailCampaign[]

  @@map("categories")
}

model EmailCampaign {
  id          String   @id @default(cuid())
  name        String
  subject     String
  body        String
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  sentAt      DateTime?
  sentCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  emailLogs   EmailLog[]

  @@map("email_campaigns")
}

model EmailLog {
  id        String      @id @default(cuid())
  campaignId String
  subscriberId String
  email     String
  status    EmailStatus @default(PENDING)
  sentAt    DateTime?
  openedAt  DateTime?
  clickedAt DateTime?
  error     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  campaign   EmailCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  subscriber Subscriber    @relation(fields: [subscriberId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([subscriberId])
  @@index([status])
}

model Influencer {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  platform    String?  // Instagram, YouTube, TikTok, etc.
  handle      String?  // @username
  followers   Int?
  engagement  Float?   // engagement rate
  category    String?  // DJ, Producer, Blogger, Promoter, etc.
  location    String?
  notes       String?
  status      InfluencerStatus @default(ACTIVE)
  priority    InfluencerPriority @default(MEDIUM)
  lastContact DateTime?
  nextContact DateTime?
  tags        String[] // ["dnb", "neurofunk", "vinyl", etc.]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriber Subscriber? @relation(fields: [email], references: [email])

  @@index([email])
  @@index([status])
  @@index([category])
}

enum SubscriberStatus {
  ACTIVE
  PENDING
  UNSUBSCRIBED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum InfluencerStatus {
  ACTIVE
  INACTIVE
  CONTACTED
  RESPONDED
  COLLABORATING
}

enum InfluencerPriority {
  LOW
  MEDIUM
  HIGH
  VIP
}

model DemoSubmission {
  id          String   @id @default(cuid())
  email       String
  artistName  String
  genre       String
  trackLink   String
  status      DemoStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([email])
  @@index([status])
  @@index([createdAt])
}

enum DemoStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
  ARCHIVED
}

model DemoFeedback {
  id              String   @id @default(cuid())
  token           String   @unique
  recipientEmail  String
  senderEmail     String?
  subject         String
  message         String
  files           Json
  rating          Int?
  feedback        String?
  name            String?
  submittedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  trackToken      String?
  wpPostId        Int?
  source          String?

  @@index([recipientEmail])
  @@index([createdAt])
}

enum Role {
  ADMIN
  USER
  EDITOR
}

model Release {
  id             String   @id @default(cuid())
  wpId           Int?     @unique
  slug           String   @unique
  title          String
  content        String?  @db.Text
  coverImageUrl  String?
  coverImageKey  String?
  previewUrl     String?
  spotify        String?
  appleMusic     String?
  beatport       String?
  deezer         String?
  soundcloud     String?
  youtubeMusic   String?
  junoDownload   String?
  tidal          String?
  gumroad        String?
  bandcamp       String?
  artistName     String?
  categories     String[] @default([])
  publishedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([publishedAt])
  @@index([slug])
  @@index([title])
  @@index([artistName])
}

model Artist {
  id         String   @id @default(cuid())
  wpId       Int?     @unique
  slug       String   @unique
  name       String
  bio        String?  @db.Text
  imageUrl   String?
  imageKey   String?
  soundcloud String?
  spotify    String?
  facebook   String?
  instagram  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([slug])
  @@index([name])
}

model News {
  id                 String   @id @default(cuid())
  wpId               Int?     @unique
  slug               String   @unique
  title              String
  content            String?  @db.Text
  coverImageUrl      String?
  coverImageKey      String?
  scsc               String?
  relatedArtistName  String?
  publishedAt        DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([publishedAt])
  @@index([slug])
  @@index([title])
}
